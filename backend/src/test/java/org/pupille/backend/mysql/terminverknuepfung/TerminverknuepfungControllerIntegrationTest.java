package org.pupille.backend.mysql.terminverknuepfung;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.oidcLogin;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.time.LocalDateTime;
import java.util.Optional;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.pupille.backend.mysql.film.Film;
import org.pupille.backend.mysql.film.FilmRepository;
import org.pupille.backend.mysql.termin.Termin;
import org.pupille.backend.mysql.termin.TerminRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class TerminverknuepfungControllerIntegrationTest {

    @Autowired private MockMvc mockMvc;

    @Autowired private ObjectMapper objectMapper;

    @Autowired private FilmRepository filmRepository;

    @Autowired private TerminRepository terminRepository;

    @Autowired private TerminverknuepfungRepository terminverknuepfungRepository;

//    private Film film;
//    private Termin termin;

//    @BeforeEach
//    void setupTestData() {
//        terminverknuepfungRepository.deleteAll();
//        filmRepository.deleteAll();
//        terminRepository.deleteAll();
//
//        // -----
//        // by setting tnr and fnr to null, you are indicating that these fields should be generated by the database upon saving the entity.
//        //    when a new Film or Termin object is created, it is not yet persisted in the database, so it does not have an ID. Setting the ID fields to null is a way to signify that they are not yet assigned.
//        //    after calling filmRepository.save(film) or terminRepository.save(termin), the JPA provider will assign the generated ID to the respective entity.
//        film = new Film();
//        film.setFnr(null);
//        film.setTitel("Test Film");
//        film = filmRepository.save(film);
//
//        termin = new Termin();
//        termin.setTnr(null);
//        termin.setTitel("Test Termin");
//        termin.setVorstellungsbeginn(LocalDateTime.now()); // Mandatory non-null field
//        termin = terminRepository.save(termin);
//        // -----
//
//        Terminverknuepfung tv = new Terminverknuepfung();
//        tv.setTnr(termin.getTnr());
//        tv.setFnr(film.getFnr());
//        tv.setFilm(film);
//        tv.setTermin(termin);
//        tv.setVorfilm(true);
//        tv.setRang((short) 1);
//        terminverknuepfungRepository.save(tv);
//    }

    private Film film1;
    private Film film2;
    private Termin termin1;
    private Termin termin2;

    private Terminverknuepfung tv2;

    @BeforeEach
    void setupTestData() {
        terminverknuepfungRepository.deleteAll();
        filmRepository.deleteAll();
        terminRepository.deleteAll();

        // Create multiple films
        film1 = new Film();
        film1.setTitel("Film A");
        film1 = filmRepository.save(film1);

        film2 = new Film();
        film2.setTitel("Film B");
        film2 = filmRepository.save(film2);

        // Create multiple termin with different dates
        termin1 = new Termin();
        termin1.setTitel("Termin A");
        termin1.setVorstellungsbeginn(LocalDateTime.of(2025, 9, 20, 10, 0)); // Earlier date
        termin1 = terminRepository.save(termin1);

        termin2 = new Termin();
        termin2.setTitel("Termin B");
        termin2.setVorstellungsbeginn(LocalDateTime.of(2025, 9, 21, 10, 0)); // Later date
        termin2 = terminRepository.save(termin2);

        // Create Terminverknuepfung entries
        Terminverknuepfung tv1 = new Terminverknuepfung();
        tv1.setTnr(termin1.getTnr());
        tv1.setFnr(film1.getFnr());
        tv1.setFilm(film1);
        tv1.setTermin(termin1);
        tv1.setVorfilm(true);
        tv1.setRang((short) 1);
        terminverknuepfungRepository.save(tv1);

        tv2 = new Terminverknuepfung();
        tv2.setTnr(termin2.getTnr());
        tv2.setFnr(film2.getFnr());
        tv2.setFilm(film2);
        tv2.setTermin(termin2);
        tv2.setVorfilm(true);
        tv2.setRang((short) 2);
//        terminverknuepfungRepository.save(tv2);
    }

    @Test
    void getAllTerminverknuepfung_returnsOkAndList() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/plain/all"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].tnr").value(termin1.getTnr()))
                .andExpect(jsonPath("$[0].fnr").value(film1.getFnr()));
    }

    @Test
    void getAllTVByOrderByTnrDesc_returnsOk() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/plain"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].tnr").value(termin1.getTnr()))
                .andExpect(jsonPath("$[0].fnr").value(film1.getFnr()));
    }

    @Test
    void getTVById_existing_returnsOk() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/plain/" + termin1.getTnr() + "/" + film1.getFnr()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.tnr").value(termin1.getTnr()))
                .andExpect(jsonPath("$.fnr").value(film1.getFnr()));
    }

    @Test
    void getTVById_notFound_returnsNotFound() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/plain/9999/9999"))
                .andExpect(status().isNotFound());
    }
    // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    @Test
    void getTVWithFilmAndTermin_returnsOk() throws Exception {
        terminverknuepfungRepository.save(tv2);

        mockMvc.perform(get("/api/terminverknuepfung"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$").isNotEmpty())
                .andExpect(jsonPath("$.length()").value(2));
    }

    @Test
    void getAllTVSortedByTermin_returnsOk() throws Exception {
        terminverknuepfungRepository.save(tv2);

        mockMvc.perform(get("/api/terminverknuepfung/terminsorted"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$").isNotEmpty())

                // Check the order of the results in descending order
                .andExpect(jsonPath("$[0].tnr").value(termin2.getTnr())) // First should be Termin B (later date)
                .andExpect(jsonPath("$[0].fnr").value(film2.getFnr())) // First should be Film B
                .andExpect(jsonPath("$[1].tnr").value(termin1.getTnr())) // Second should be Termin A (earlier date)
                .andExpect(jsonPath("$[1].fnr").value(film1.getFnr())); // Second should be Film A
    }

    @Test
    void getTVbyIds_returnsOk() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/" + termin1.getTnr() + "/" + film1.getFnr()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.tnr").value(termin1.getTnr()))
                .andExpect(jsonPath("$.fnr").value(film1.getFnr()));
    }
    // ---------------------------------------------------------------------------------------------
    @Test
    void getFilmeByTnr_returnsOk() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/film/fromtermin/" + termin1.getTnr()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray());
    }

    @Test
    void getTermineByFnr_returnsOk() throws Exception {
        mockMvc.perform(get("/api/terminverknuepfung/termin/fromfilm/" + film1.getFnr()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray());
    }
    //    #############################################################
    //    #############################################################
    @Test
    void updateTerminverknuepfung_returnsOk() throws Exception {
        var dto = new TerminverknuepfungDTOSelection(termin1.getTnr(), film1.getFnr(), false, (short) 2);

        mockMvc.perform(put("/api/terminverknuepfung/" + termin1.getTnr() + "/" + film1.getFnr())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dto))
                        .with(oidcLogin().userInfoToken(token -> token.claim("login", "github-username"))))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.tnr").value(termin1.getTnr()))
                .andExpect(jsonPath("$.fnr").value(film1.getFnr()))
                .andExpect(jsonPath("$.vorfilm").value(false))
                .andExpect(jsonPath("$.rang").value(2));
    }

    @Test
    void deleteTerminverknuepfung_returnsNoContent() throws Exception {
        // Perform the delete operation
        mockMvc.perform(delete("/api/terminverknuepfung/" + termin1.getTnr() + "/" + film1.getFnr())
                        .with(oidcLogin().userInfoToken(token -> token.claim("login", "github-username"))))
                .andExpect(status().isNoContent());

        // Verify that the Terminverknuepfung is no longer in the repository
        Terminverknuepfung.TerminverknuepfungId id = new Terminverknuepfung.TerminverknuepfungId(termin1.getTnr(), film1.getFnr());
        assertFalse(terminverknuepfungRepository.existsById(id));
    }

    @Test
    void linkExistingFilmToExistingTermin_success_returnsCreated() throws Exception {
        // Create fresh Film and Termin with unique IDs
        Film newFilm = new Film();
        newFilm.setTitel("New Film");
        Film savedFilm = filmRepository.save(newFilm);

        Termin newTermin = new Termin();
        newTermin.setTitel("New Termin");
        newTermin.setVorstellungsbeginn(LocalDateTime.now());
        Termin savedTermin = terminRepository.save(newTermin);

        var dto = new TerminverknuepfungDTOSelection(savedTermin.getTnr(), savedFilm.getFnr(), true, (short) 1);

        // Perform the creation operation
        mockMvc.perform(post("/api/terminverknuepfung/link-film-termin")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dto))
                        .with(oidcLogin().userInfoToken(token -> token.claim("login", "github-username"))))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.message").exists());

        // Verify that the Terminverknuepfung is present in the repository
        Terminverknuepfung.TerminverknuepfungId id = new Terminverknuepfung.TerminverknuepfungId(savedTermin.getTnr(), savedFilm.getFnr());
        assertTrue(terminverknuepfungRepository.existsById(id));

        // Optionally, you can also verify the details of the saved Terminverknuepfung
        Optional<Terminverknuepfung> savedTV = terminverknuepfungRepository.findById(id);
        assertTrue(savedTV.isPresent());
        Terminverknuepfung savedTerminverknuepfung = savedTV.get();
        // these two lines make the test fail because of lazy loading in Terminverknuepfung entity class
//        assertEquals(savedTermin, savedTerminverknuepfung.getTermin());
//        assertEquals(savedFilm, savedTerminverknuepfung.getFilm());
        assertEquals(dto.vorfilm(), savedTerminverknuepfung.getVorfilm());
        assertEquals(dto.rang(), savedTerminverknuepfung.getRang());
    }

    @Test
    void linkExistingFilmToExistingTermin_linkExists_returnsBadRequest() throws Exception {
        var dto = new TerminverknuepfungDTOSelection(termin1.getTnr(), film1.getFnr(), true, (short) 1);

        // for this error scenario: test data dto is prepared to throw RuntimeException with message "Link already exists"
        // it' is ensured that a Terminverknuepfung with the given tnr and fnr already exists in the repository before performing the POST request
        mockMvc.perform(post("/api/terminverknuepfung/link-film-termin")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dto))
                        .with(oidcLogin().userInfoToken(token -> token.claim("login", "github-username"))))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").exists())
                .andExpect(jsonPath("$.error").value("Link already exists"));
    }
}
