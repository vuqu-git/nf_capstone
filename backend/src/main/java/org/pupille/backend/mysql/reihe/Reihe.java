package org.pupille.backend.mysql.reihe;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.pupille.backend.mysql.termin.Termin;

import java.util.HashSet;
import java.util.Set;

@Entity
@Data
@Table(name = "reihe")
public class Reihe {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(columnDefinition = "BIGINT UNSIGNED")
    private Long rnr;

    private String titel;

    @Column(columnDefinition = "TEXT")
    private String text;

    private String farbe;

    // ############################################
    // New many-to-many relationship (added below existing fields)
    @ManyToMany // no cascading (Safest)
    // @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}) // safe combination (Most common)
    @JoinTable(
            name = "reihe_terminverknuepfung",
            joinColumns = @JoinColumn(name = "rnr", columnDefinition = "BIGINT UNSIGNED"),
            inverseJoinColumns = @JoinColumn(name = "tnr", columnDefinition = "BIGINT UNSIGNED")
    )
    // @JsonIgnore // i.e. this field won't be serialized at all
    @JsonManagedReference // This side will be serialized and include the Termine
    // Exclude from Lombok's equals/hashCode, to avoid ConcurrentModificationException: often arises when Hibernate is trying to load or merge a collection, and the equals/hashCode methods, generated by Lombok, are inadvertently causing the collection to be "modified" (or its internal state to be accessed in a way Hibernate isn't expecting during its loading process)
    // By default, @Data generates equals() and hashCode() that include all fields
    // => The Solution: Exclude Collection Fields from Lombok's equals()/hashCode()
    @EqualsAndHashCode.Exclude
    private Set<Termin> termine = new HashSet<>();
    // ############################################
}
